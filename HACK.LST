Turbo Assembler	 Version 4.1	    03/02/24 23:59:48	    Page 1
hack.asm



      1	0000			     .model tiny
      2				     .286
      3	0000			     .code
      4				     org 100h
      5
      6
      7				     PRINT_STR	     macro str:REQ							     ; Macro+
      8				     for displaying the	string str on the screen
      9						     mov dx, offset str
     10						     mov ah, 09h
     11						     int 21h
     12
     13						     endm
     14
     15
     16	      =000A		     LINE_FEED equ 0Ah									     ; ASCII+
     17				     code for line feed
     18
     19	      =000D		     CARRIAGE_RETURN equ 0Dh								     ; ASCII+
     20				     code for carriage return
     21
     22	      =0001		     RIGHT_PASSWORD equ	1								     ; Value+
     23				     for the password flag if it is correct
     24
     25	      =0000		     WRONG_PASSWORD equ	0								     ; Value+
     26				     for the password flag if it is incorrect
     27
     28	      =1809		     PASSWORD equ 1809h									     ;	    +
     29				     Password hash code
     30
     31	      =0006		     LEN_OF_CANARY_VALUE equ 6h
     32
     33	0100			     Start:
     34	0100  E8 0008				     Call Main
     35	0103  EB 01 90				     jmp Exit
     36
     37	0106				     Exit:									     ; Exit +
     38				     the program
     39	0106  B8 4C00				     mov ax, 4c00h
     40	0109  CD 21				     int 21h
     41
     42
     43	010B			     Main    proc
     44	010B  E8 000D				     Call ReadPassword							     ;	    +
     45				     Calling the password reading function
     46
     47	010E  E8 0019				     Call NewLine							     ;	    +
     48				     Calling a function	to go to the beginning of a new	line
     49
     50	0111  E8 0023				     Call HashPassword							     ;	    +
     51				     Calling the Password Hashing Function
     52
     53	0114  E8 0035				     Call ComparePassword						     ;	    +
     54				     Calling the password comparison function
     55
     56	0117  E8 0079				     Call PrintResult							     ;	    +
     57				     Calling the output	function
Turbo Assembler	 Version 4.1	    03/02/24 23:59:48	    Page 2
hack.asm



     58
     59	011A  C3				     ret
     60	011B					     endp
     61
     62
     63				     ;;----------------------------------------------------------------------------------------------
     64				     ------------------------------------------------------------------------------------------------
     65				     ----------
     66				     ; Function	to read	password from stream input
     67				     ; Info:
     68				     ;	     AX	- stores the function number for reading a line	from stdin into	a buffer
     69				     ;	     DX	- stores the maximum number per	character to read
     70				     ;	     msg_hello - welcome message
     71				     ;	     len_buffer	- maximum number per character to read
     72				     ; Destr:
     73				     ;	     AX
     74				     ;	     DX
     75				     ;;----------------------------------------------------------------------------------------------
     76				     ------------------------------------------------------------------------------------------------
     77				     ----------
     78
     79
     80	011B			     ReadPassword    proc
     81						     PRINT_STR msg_hello						     ;	    +
     82				     Welcome message output
1    83	011B  BA 0006r				     mov dx, offset msg_hello
1    84	011E  B4 09				     mov ah, 09h
1    85	0120  CD 21				     int 21h
1    86
     87
     88	0122  BA 0045r				     mov dx, offset len_buffer
     89	0125  B4 0A				     mov ah, 0Ah
     90	0127  CD 21				     int 21h								     ;	    +
     91				     Reading password
     92
     93	0129  C3				     ret
     94	012A					     endp
     95
     96
     97				     ;;----------------------------------------------------------------------------------------------
     98				     ------------------------------------------------------------------------------------------------
     99				     ----------
    100				     ; Function	to go to the beginning of a new	line
    101				     ; Info:
    102				     ;	     AX	- stores the function number for displaying one	character on the screen
    103				     ;	     DX	- stores the character printed to standard output
    104				     ;	     LINE_FEED - ASCII code for	line feed
    105				     ;	     CARRIAGE_RETURN - ASCII code for carriage return
    106				     ; Destr:
    107				     ;	     AX
    108				     ;	     DX
    109				     ;;----------------------------------------------------------------------------------------------
    110				     ------------------------------------------------------------------------------------------------
    111				     ----------
    112
    113
    114	012A			     NewLine proc
Turbo Assembler	 Version 4.1	    03/02/24 23:59:48	    Page 3
hack.asm



    115	012A  B4 02				     mov ah, 02h
    116
    117	012C  BA 000A				     mov dx, LINE_FEED
    118	012F  CD 21				     int 21h								     ;	    +
    119				     Printing a	newline	character
    120
    121	0131  BA 000D				     mov dx, CARRIAGE_RETURN
    122	0134  CD 21				     int 21h								     ;	    +
    123				     Printing a	carriage return	to the beginning of a line
    124
    125	0136  C3				     ret
    126	0137					     endp
    127
    128
    129				     ;;----------------------------------------------------------------------------------------------
    130				     ------------------------------------------------------------------------------------------------
    131				     ----------
    132				     ; Password	hashing	function
    133				     ; General formula:	dx = dx	+ ASCII_CODE
    134				     ; Info:
    135				     ;	     AX	- used to temporarily store the	value from the dx register
    136				     ;	     BX	- stores a pointer to the password string
    137				     ;	     CX	- stores a value with the password length
    138				     ;	     DX	- stores the hash code value
    139				     ;	     buffer - variable pointing	to the password	string
    140				     ;	     fact_len_buffer - password	length
    141				     ; Destr:
    142				     ;	     AX
    143				     ;	     BX
    144				     ;	     CX
    145				     ;	     DX
    146				     ;;----------------------------------------------------------------------------------------------
    147				     ------------------------------------------------------------------------------------------------
    148				     ----------
    149
    150
    151	0137			     HashPassword    proc
    152	0137  BB 0047r				     mov bx, offset buffer
    153	013A  8A 0E 0046r			     mov cl, fact_len_buffer
    154	013E  BA 1505				     mov dx, 5381d							     ; this +
    155				     number gives a more uniform distribution of hash values
    156
    157	0141				     @@hash_again:
    158	0141  B8 0000				     mov ax, 0
    159	0144  8A 07				     mov al, byte ptr [bx]
    160	0146  03 D0				     add dx, ax								    ; add   +
    161				     the ascii code of the symbol to the hash
    162
    163	0148  43				     inc bx								     ; move +
    164				     to	the next character of the password
    165	0149  E2 F6				     loop @@hash_again							     ; dx = +
    166				     dx	+ ASCII_CODE
    167
    168	014B  C3				     ret
    169	014C					     endp
    170
    171
Turbo Assembler	 Version 4.1	    03/02/24 23:59:48	    Page 4
hack.asm



    172				     ;;----------------------------------------------------------------------------------------------
    173				     ------------------------------------------------------------------------------------------------
    174				     ----------
    175				     ; Password	comparison function
    176				     ; Entry:
    177				     ;	     DX	- stores the password hash code
    178				     ; Info:
    179				     ;	     PASSWORD -	hash code of the correct password
    180				     ;	     flag_password - a variable	storing	the value 1 if the password is correct and 0 if	it  +
    181				     is	incorrect
    182				     ;	     RIGHT_PASSWORD - the value	received by the	flag_password variable if the password is   +
    183				     correct
    184				     ;;----------------------------------------------------------------------------------------------
    185				     ------------------------------------------------------------------------------------------------
    186				     ----------
    187
    188
    189	014C			     ComparePassword proc
    190	014C  E8 0012				     Call CanaryCheck							     ;
    191	014F  3D 0000				     cmp ax, 0								     ;
    192	0152  75 0C				     jne @@not_equal
    193
    194	0154  81 FA 1809			     cmp dx, PASSWORD							     ;	    +
    195				     Password comparison
    196	0158  75 06				     jne @@not_equal							     ; If   +
    197				     true, then	change the value of the	flag
    198															     ;	    +
    199				     Otherwise we exit the function
    200
    201	015A  C6 06 0057r 01 90			     mov flag_password,	RIGHT_PASSWORD
    202
    203	0160				     @@not_equal:
    204
    205	0160  C3				     ret
    206	0161					     endp
    207
    208
    209	0161			     CanaryCheck     proc
    210	0161  68 0000r				     push offset canary_value
    211	0164  68 0051r				     push offset canary
    212	0167  6A 06				     push LEN_OF_CANARY_VALUE
    213
    214	0169  E8 000C				     Call MyMemCmp
    215
    216	016C  3D 0000				     cmp ax, 0
    217	016F  74 06				     je	@@canary_right
    218	0171  C6 06 0057r 00 90			     mov flag_password,	WRONG_PASSWORD
    219
    220	0177				     @@canary_right:
    221	0177  C3				     ret
    222	0178					     endp
    223
    224
    225	0178			     MyMemCmp	     proc
    226	0178  55				     push bp
    227	0179  8B EC				     mov bp, sp
    228
Turbo Assembler	 Version 4.1	    03/02/24 23:59:48	    Page 5
hack.asm



    229	017B  8B 76 08				     mov si, [bp + 8]
    230	017E  8B 7E 06				     mov di, [bp + 6]
    231	0181  8B 4E 04				     mov cx, [bp + 4]
    232
    233	0184  B8 0000				     mov ax, 0
    234
    235	0187				     again:
    236	0187  02 04				     add al, [si]
    237	0189  2A 05				     sub al, [di]
    238
    239	018B  46				     inc si
    240	018C  47				     inc di
    241	018D  E2 F8				     loop again
    242
    243	018F  5D				     pop bp
    244
    245	0190  C2 0006				     ret 6
    246	0193					     endp
    247
    248
    249				     ;;----------------------------------------------------------------------------------------------
    250				     ------------------------------------------------------------------------------------------------
    251				     ----------
    252				     ; Result function
    253				     ; Info:
    254				     ;	     flag_password - a variable	storing	the value 1 if the password is correct and 0 if	it  +
    255				     is	incorrect
    256				     ;	     WRONG_PASSWORD - the value	received by the	flag_password variable if the password is   +
    257				     incorrect
    258				     ;	     msg_right_password	- message displayed on screen if password is correct
    259				     ;	     msg_wrong_password	- message displayed on screen if password is incorrect
    260				     ;;----------------------------------------------------------------------------------------------
    261				     ------------------------------------------------------------------------------------------------
    262				     ----------
    263
    264
    265	0193			     PrintResult     proc
    266	0193  80 3E 0057r 00			     cmp flag_password,	WRONG_PASSWORD					     ;	    +
    267				     Comparing the flag	value with the value if	the password is	incorrect
    268	0198  74 0A				     je	@@wrong_password
    269
    270						     PRINT_STR msg_right_password					     ;	    +
    271				     Displaying	a message that the password is correct
1   272	019A  BA 0023r				     mov dx, offset msg_right_password
1   273	019D  B4 09				     mov ah, 09h
1   274	019F  CD 21				     int 21h
1   275
    276	01A1  EB 08 90				     jmp @@ret
    277
    278	01A4				     @@wrong_password:
    279						     PRINT_STR msg_wrong_password					     ;	    +
    280				     Displaying	a message that the password is incorrect
1   281	01A4  BA 0033r				     mov dx, offset msg_wrong_password
1   282	01A7  B4 09				     mov ah, 09h
1   283	01A9  CD 21				     int 21h
1   284
    285
Turbo Assembler	 Version 4.1	    03/02/24 23:59:48	    Page 6
hack.asm



    286
    287	01AB				     @@ret:
    288	01AB  C3				     ret
    289	01AC					     endp
    290
    291
    292	01AC			     .data
    293
    294
    295	0000  63 61 6E 61 72 79	     canary_value db "canary"								    ;
    296
    297	0006  48 65 6C 6C 6F 2C	20+  msg_hello db "Hello, enter	your password: $"					     ;	    +
    298	      65 6E 74 65 72 20	79+  Welcome message
    299	      6F 75 72 20 70 61	73+
    300	      73 77 6F 72 64 3A	20+
    301	      24
    302
    303	0023  52 69 67 68 74 20	70+  msg_right_password	db "Right password!$"						     ;	    +
    304	      61 73 73 77 6F 72	64+  Message displayed on screen if password is	correct
    305	      21 24
    306
    307	0033  57 72 6F 6E 67 20	70+  msg_wrong_password	db "Wrong password...$"						     ;	    +
    308	      61 73 73 77 6F 72	64+  Message displayed on screen if password is	incorrect
    309	      2E 2E 2E 24
    310
    311	0045  FE		     len_buffer	db 254									     ;	    +
    312				     Maximum number per	character to read
    313
    314	0046  00		     fact_len_buffer db	0								     ; This +
    315				     variable will store the number of characters read from standard input
    316
    317	0047  0A*(??)		     buffer db 10 dup(?)								     ; This +
    318				     variable will point to the	beginning of the line read from	standard input
    319
    320	0051  63 61 6E 61 72 79	     canary db "canary"									 ;
    321
    322	0057  00		     flag_password db WRONG_PASSWORD							     ; A    +
    323				     variable storing the value	1 if the password is correct and 0 if it is incorrect (initially    +
    324				     stores the	value of the incorrect password)
    325
    326				     end     Start
Turbo Assembler	 Version 4.1	    03/02/24 23:59:48	    Page 7
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/02/24"
??FILENAME			  Text	 "hack	  "
??TIME				  Text	 "23:59:48"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@CANARY_RIGHT			  Near	 DGROUP:0177
@@HASH_AGAIN			  Near	 DGROUP:0141
@@NOT_EQUAL			  Near	 DGROUP:0160
@@RET				  Near	 DGROUP:01AB
@@WRONG_PASSWORD		  Near	 DGROUP:01A4
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0707H
@CURSEG				  Text	 _DATA
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 HACK
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
AGAIN				  Near	 DGROUP:0187
BUFFER				  Byte	 DGROUP:0047
CANARY				  Byte	 DGROUP:0051
CANARYCHECK			  Near	 DGROUP:0161
CANARY_VALUE			  Byte	 DGROUP:0000
CARRIAGE_RETURN			  Number 000D
COMPAREPASSWORD			  Near	 DGROUP:014C
EXIT				  Near	 DGROUP:0106
FACT_LEN_BUFFER			  Byte	 DGROUP:0046
FLAG_PASSWORD			  Byte	 DGROUP:0057
HASHPASSWORD			  Near	 DGROUP:0137
LEN_BUFFER			  Byte	 DGROUP:0045
LEN_OF_CANARY_VALUE		  Number 0006
LINE_FEED			  Number 000A
MAIN				  Near	 DGROUP:010B
MSG_HELLO			  Byte	 DGROUP:0006
MSG_RIGHT_PASSWORD		  Byte	 DGROUP:0023
MSG_WRONG_PASSWORD		  Byte	 DGROUP:0033
MYMEMCMP			  Near	 DGROUP:0178
NEWLINE				  Near	 DGROUP:012A
PASSWORD			  Number 1809
PRINTRESULT			  Near	 DGROUP:0193
READPASSWORD			  Near	 DGROUP:011B
RIGHT_PASSWORD			  Number 0001
START				  Near	 DGROUP:0100
WRONG_PASSWORD			  Number 0000

Macro Name

PRINT_STR
Turbo Assembler	 Version 4.1	    03/02/24 23:59:48	    Page 8
Symbol Table




Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0058 Word	  Public  DATA
  _TEXT				  16  01AC Word	  Public  CODE
